import collections
import enum
import os
import re

from lib.components import shared


class VulnerabilityStatus(enum.Enum):
  NOT_AFFECTED = 'NOT_AFFECTED'
  VULNERABLE = 'VULNERABLE'
  MITIGATED = 'MITIGATED'


_VulnerabilityLookup = collections.namedtuple('VulnerabilityLookup', [
    'description',
    'cves'])

_KnownVulnerability = collections.namedtuple('KnownVulnerability', [
    'name',
    'description',
    'cves',
    'vulnerability_status',
    'vulnerability_description',
])

_VULNERABILITY_STATUS_LOOKUP = {
    'Not affected': VulnerabilityStatus.NOT_AFFECTED.value,
    'Vulnerability: ': VulnerabilityStatus.VULNERABLE.value,
    'Mitigation: ': VulnerabilityStatus.MITIGATED.value,
}

_VULNERABILITIES = {
    'l1tf': _VulnerabilityLookup(
        description='Foreshadow',
        cves=['CVE-2018-3620'],
    ),
    'mds': _VulnerabilityLookup(
        description='Fallout/ZombieLoad/RIDL',
        cves=[
            'CVE-2018-12126',
            'CVE-2018-12130',
            'CVE-2018-12127',
            'CVE-2019-11091']
    ),
    'meltdown': _VulnerabilityLookup(
        description='Meltdown',
        cves=['CVE-2017-5754'],
    ),
    'spec_store_bypass': _VulnerabilityLookup(
        description='Spectre Variant 4',
        cves=['CVE-2018-3639'],
    ),
    'spectre_v1': _VulnerabilityLookup(
        description='Spectre Variant 1',
        cves=['CVE-2017-5753'],
    ),
    'spectre_v2': _VulnerabilityLookup(
        description='Spectre Variant 2',
        cves=['CVE-2017-5715'],
    ),
}


class _VulnerabilityConfigShim(shared.ShimObject):
  def FromEngine(self) -> shared.ConfigType:
      c = []
      vuln_dir = '/sys/devices/system/cpu/vulnerabilities/'
      for v in os.listdir(vuln_dir):
        data = shared.get_sys_output(
            'cat {path}'.format(path=os.path.join(vuln_dir, v)))
        m = re.match(
            '^(?P<status>(?:Not affected|Vulnerable: |Mitigation: ))(?P<description>.*)$',
            data)
        c.append(_KnownVulnerability(
            name=v,
            vulnerability_status=_VULNERABILITY_STATUS_LOOKUP[
                m.groupdict().get('status', '')],
            vulnerability_description=m.groupdict().get('description', ''),
            **_VULNERABILITIES.get(
                v, _VulnerabilityLookup(description='', cves=[]))._asdict()
        )._asdict())
      return c


def get_vulnerability_status() -> shared.ConfigType:
  return _VulnerabilityConfigShim().FromEngine()
